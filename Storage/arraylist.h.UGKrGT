


#ifndef ARRAYLIST_H
#define ARRAYLIST_H


template<class ItemType>
class ArrayList
{
private:
   static const int DEFAULT_CAPACITY = 40;
   ItemType items[DEFAULT_CAPACITY + 1];
   int itemCount=0;
   int maxItems;
public:
   ArrayList();

   bool isEmpty() const;
   int getLength() const;
   bool insert(int newPosition, const ItemType& newEntry);
   bool remove(int position);
   void clear();
   ItemType getEntry(int position);
  void checkResize();
  void setEntry(int position, const ItemType& newEntry);
   ItemType replace(int position, const ItemType& newEntry);


}; // end ArrayList


template<class ItemType>
ArrayList<ItemType>::ArrayList() : itemCount(0), maxItems(DEFAULT_CAPACITY)
{
}  // end default constructor

//checks if arraylist is empty
template<class ItemType>
bool ArrayList<ItemType>::isEmpty() const
{
  if(itemCount == 0){
      return true;
  }
  return false;
}

//get arraylist size
template<class ItemType>
int ArrayList<ItemType>::getLength() const
{
   return itemCount;
}

template<class ItemType>
ItemType ArrayList<ItemType>::getEntry(int position)
{

   bool ableToGet = (position >= 1) && (position <= itemCount);
   if (ableToGet){
      return items[position];
   }

   throw new;
}


template<class ItemType>
void ArrayList<ItemType>::checkResize() {
if (itemCount == maxItems) {

}

}

template<class ItemType>
bool ArrayList<ItemType>::insert(int newPosition, const ItemType& newEntry)
{
   checkResize();
   bool ableToInsert = (newPosition >= 1) && (newPosition <= itemCount + 1)
                       && (itemCount < maxItems);
   if (ableToInsert)
   {
      // Make room for new entry by shifting all entries at
      // positions from itemCount down to newPosition
      // (no shift if newPosition == itemCount + 1)
      for (int pos = itemCount; pos >= newPosition; pos--)
         items[pos] = items[pos - 1];

      // Insert new entry
      items[newPosition] = newEntry;
      itemCount++;  // Increase count of entries
   }  // end if

   return ableToInsert;
}  // end insert

template<class ItemType>
bool ArrayList<ItemType>::remove(int position)
{
   bool ableToRemove = (position >= 1) && (position <= itemCount);
   if (ableToRemove)
   {
      // Remove entry by shifting all entries after the one at
      // position toward the beginning of the array
      // (no shift if position == itemCount)
      for (int pos = position; pos < itemCount; pos++)
         items[pos] = items[pos + 1];

      itemCount--;  // Decrease count of entries
   }  // end if

   return ableToRemove;
}  // end remove


template<class ItemType>
ItemType ArrayList<ItemType>::replace(int position, const ItemType& newEntry)

{
    checkResize();
   // Enforce precondition
   bool ableToSet = (position >= 1) && (position <= itemCount);
   if (ableToSet)
   {
      ItemType oldEntry = items[position];
      items[position] = newEntry;
      return oldEntry;
   }

}  // end replace

template<class ItemType>
void ArrayList<ItemType>::clear()
{
   itemCount = 0;
}  // end clear



#endif // ARRAYLIST_H
